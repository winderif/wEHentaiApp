package com.example.winderif.ehentaiapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.winderif.ehentaiapp.Tag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TAG.
*/
public class TagDao extends AbstractDao<Tag, Long> {

    public static final String TABLENAME = "TAG";

    /**
     * Properties of entity Tag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Count = new Property(2, Integer.class, "count", false, "COUNT");
        public final static Property LastRead = new Property(3, java.util.Date.class, "lastRead", false, "LAST_READ");
        public final static Property Latest = new Property(4, java.util.Date.class, "latest", false, "LATEST");
        public final static Property LatestCount = new Property(5, Integer.class, "latestCount", false, "LATEST_COUNT");
        public final static Property Subscribed = new Property(6, Boolean.class, "subscribed", false, "SUBSCRIBED");
    };


    public TagDao(DaoConfig config) {
        super(config);
    }
    
    public TagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TAG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'COUNT' INTEGER," + // 2: count
                "'LAST_READ' INTEGER," + // 3: lastRead
                "'LATEST' INTEGER," + // 4: latest
                "'LATEST_COUNT' INTEGER," + // 5: latestCount
                "'SUBSCRIBED' INTEGER);"); // 6: subscribed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TAG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(3, count);
        }
 
        java.util.Date lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindLong(4, lastRead.getTime());
        }
 
        java.util.Date latest = entity.getLatest();
        if (latest != null) {
            stmt.bindLong(5, latest.getTime());
        }
 
        Integer latestCount = entity.getLatestCount();
        if (latestCount != null) {
            stmt.bindLong(6, latestCount);
        }
 
        Boolean subscribed = entity.getSubscribed();
        if (subscribed != null) {
            stmt.bindLong(7, subscribed ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tag readEntity(Cursor cursor, int offset) {
        Tag entity = new Tag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // count
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // lastRead
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // latest
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // latestCount
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // subscribed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLastRead(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLatest(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLatestCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSubscribed(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
